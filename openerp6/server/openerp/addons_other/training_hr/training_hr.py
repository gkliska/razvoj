# -*- encoding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (c) 2011 Zikzakmedia S.L. (http://zikzakmedia.com) All Rights Reserved.
#                       Jesús Martín <jmartin@zikzakmedia.com>
#    $Id$
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import osv, fields
from tools.translate import _


class training_hr_subscription(osv.osv):
    _name = 'training.hr.subscription'
    _description = 'Subscription'

    _columns = {
        'name' : fields.char('Reference', size=32, required=True, readonly=True, help='The unique identifier is generated by the system (customizable).'),
        'create_date' : fields.datetime('Creation Date', select=True, readonly=True),
        'state' : fields.selection([('draft', 'Draft'), ('confirmed','Request Sent'), ('cancelled','Cancelled'), ('done', 'Done') ], 'State', readonly=True, required=True, help='The state of the subscription.'),
        'employee_id' : fields.many2one('hr.employee', 'Employee', required=True, help='The subscription name.'),
        'subscription_line_ids' : fields.one2many('training.hr.subscription.line', 'subscription_id', 'Subscription Lines'),
    }

    _defaults = {
        'state' : lambda *a: 'draft',
        'name' : lambda *args: '/',
    }

    def create(self, cr, uid, vals, context):
        if vals.get('name', '/')=='/':
            vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'training.hr.subscription')
        return super(training_hr_subscription, self).create(cr, uid, vals, context)

    _order = 'create_date desc'

    _sql_constraints=[
        ('uniq_name', 'unique(name)', 'The name of the subscription must be unique !'),
    ]

    # training.subscription
    def action_workflow_confirm(self, cr, uid, ids, context=None):
        print "=========================================> confirm"
        return self.write(cr, uid, ids, {'state': 'confirmed'}, context=context)

    # training.subscription
    def action_workflow_cancel(self, cr, uid, ids, context=None):
        print "=========================================> cancel"
        return self.write(cr, uid, ids, {'state' : 'cancelled'}, context=context)

    # training.subscription
    def action_workflow_done(self, cr, uid, ids, context=None):
        print "=========================================> done"
        return self.write(cr, uid, ids, {'state' : 'done'}, context=context)

training_hr_subscription()


class training_hr_subscription_line(osv.osv):
    _name = 'training.hr.subscription.line'
    _description = 'Subscription Line'

    _columns = {
        'name': fields.char('Reference', size=64, required=True, readonly=True),
        'subscription_id': fields.many2one('training.hr.subscription', 'Subscription', required=True, ondelete='cascade', help='Select the subscription.'),
        'state': fields.selection([('draft', 'Draft'),
                                    ('confirmed','Confirmed'),
                                    ('cancelled','Cancelled'),
                                    ('done', 'Done') ],
                                   'State',
                                   required=True, readonly=True, help='The state of participant.'),
        'session_id': fields.many2one('training.session', 'Session', required=True, domain="[('state', 'in', ('opened','opened_confirmed', 'closed_confirmed', 'inprogress'))]", help='Select the session.'),
    }
        
    _defaults = {
        'state': lambda *a: 'draft',
        'name' : lambda *args: '/',
    }

    
    def _check_subscription_line(self, cr, uid, ids, context=None):
        if context is None:
            context = {}
        lines = self.browse(cr, uid, ids, context=context)
        for line in lines:
            ids = self.search(cr, uid, [('session_id', '=', line.session_id.id), ('subscription_id.employee_id.id', '=', line.subscription_id.employee_id.id), ('id', '!=', line.id)], context=context)
            if len(ids):
                return False
        return True

    def create (self, cr, uid, vals, context):
        if vals.get('name', '/')=='/':
            vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'training.hr.subscription.line')
        return super(training_hr_subscription_line, self).create(cr, uid, vals, context)
        
    _constraints = [
        (_check_subscription_line, '\nThe subscription lines must be uniques for each employee!\nHas the employee another subscription with this subscription line?', ['Subscription Lines']),
    ]

    def on_change_subscription(self, cr, uid, ids, subscription_id, context=None):
        if not subscription_id:
            return False
        return {'value' : {'employee_id' : self.pool.get('training.hr.subscription').browse(cr, uid, subscription_id, context=context).employee_id.id}}


    # training.subscription.line
    def action_workflow_draft(self, cr, uid, ids, context=None):
        return self.write(cr, uid, ids, {'state' : 'draft'}, context=context)

    # training.subscription.line
    def action_workflow_cancel(self, cr, uid, ids, context=None):
        return self.write(cr, uid, ids, {'state' : 'cancelled'}, context=context)

    # training.subscription.line
    def action_workflow_done(self, cr, uid, ids, context=None):
        return self.write(cr, uid, ids, {'state' : 'done'}, context=context)

    # training.subscription.line
    def action_workflow_confirm(self, cr, uid, ids, context=None):
        return self.write(cr, uid, ids, {'state': 'confirmed'}, context=context)


training_hr_subscription_line()


class hr_employee(osv.osv):

    _name = "hr.employee"
    _inherit = 'hr.employee'
    _columns = {
        'subscription_ids' : fields.one2many('training.hr.subscription', 'employee_id', 'Subscription'),
    }

hr_employee()
